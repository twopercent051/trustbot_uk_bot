from aiogram import Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.filters import Text
from aiogram.utils.markdown import hbold
from aiogram.dispatcher import FSMContext

from tgbot.misc.states import FSMRegistration, FSMRequest, FSMConnection, FSMSettings
from tgbot.misc import checker
from tgbot.database import db_connector
from tgbot.keyboards import reply
from tgbot.keyboards import inline
from tgbot.config import load_config
from create_bot import bot


async def user_start(message: Message):
    text = [
        f'‚òÄÔ∏è <b>–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ß—Ç–æ–±—ã',
        f'–≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–∏–º, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–ª—è –Ω–∞—á–∞–ª–∞ –í–∞—à–µ <b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—é</b>'
    ]
    await FSMRegistration.name.set()
    await message.answer(' '.join(text))


async def get_user_name(message: Message, state: FSMContext):
    text_ok = [
        f'üìû–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –í–∞—à <b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> —á–µ—Ä–µ–∑ <b>+7</b> —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:'
    ]
    text_error = [
        f'‚õîÔ∏èüìõ<b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—è</b> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω <i>–ø—Ä–æ–±–µ–ª</i>, –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å',
        f'–Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ <i>–∫–∏—Ä–∏–ª–ª–∏—Ü—É</i>. –¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <i>–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã</i>.',
        f'<b>–£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>'
    ]
    check_name = await checker.user_name_checker(str(message.text))
    if check_name:
        user_id = message.from_user.id
        try:
            username = message.from_user.username
        except:
            username = '---'
        async with state.proxy() as data:
            data['user_id'] = user_id
            data['user_username'] = username
            data['user_name'] = message.text
        await FSMRegistration.next()
        await message.answer(' '.join(text_ok))
    else:
        await message.answer(' '.join(text_error))


async def main_menu_by_message(message: Message):
    text_ok = [
        f'‚úàÔ∏è<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> <i>–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì"</i>. –ó–¥–µ—Å—å',
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–º–æ–º.',
        f'–ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ <b><i>–º–µ–Ω—é</i></b>, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:'
    ]
    await FSMRegistration.main.set()
    await message.answer(' '.join(text_ok), reply_markup=reply.main_menu_user_keyboard)
    print(message.chat.id)


async def main_menu_by_callback(callback: CallbackQuery):
    text_ok = [
        f'‚úàÔ∏è<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b> <i>–≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —á–∞—Ç-–±–æ—Ç–∞ –£–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì"</i>. –ó–¥–µ—Å—å',
        f'–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –¥–æ–º–æ–º.',
        f'–ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ <b><i>–º–µ–Ω—é</i></b>, —á—Ç–æ–±—ã –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:'
    ]
    await FSMRegistration.main.set()
    await callback.message.answer(' '.join(text_ok), reply_markup=reply.main_menu_user_keyboard)
    await bot.answer_callback_query(callback.id)


async def get_user_phone(message: Message, state: FSMContext):
    text_error = [
        f'‚õîÔ∏èüìõ‚õî{hbold("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")} –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ',
        f'{hbold("+7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")}'
    ]
    check_phone = await checker.user_phone_checker(str(message.text))
    if check_phone:
        async with state.proxy() as data:
            data['user_phone'] = message.text
            data['is_blocked'] = 'False'
        await db_connector.sql_add_user(state)
        await state.finish()
        await main_menu_by_message(message)
    else:
        await message.answer(' '.join(text_error))


async def request_category_by_message(message: Message):
    text = [
        'üìõüëáüìõ<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:</i>'
    ]
    await FSMRequest.request_main.set()
    await message.answer(text=' '.join(text), reply_markup=inline.main_request_keyboard)


async def request_category_by_callback(callback: CallbackQuery):
    text = [
        'üìõüëáüìõ<i>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –£–ö:</i>'
    ]
    await FSMRequest.request_main.set()
    await callback.message.answer(text=' '.join(text), reply_markup=inline.main_request_keyboard)
    await bot.answer_callback_query(callback.id)


async def request_adress(callback: CallbackQuery):
    text = [
        '<i><b>–®–∞–≥ 1/3.</b></i> üìù–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ä–∏–µ–Ω—Ç–∏—Ä –ø—Ä–æ–±–ª–µ–º—ã (—É–ª–∏—Ü—É, –Ω–æ–º–µ—Ä –¥–æ–º–∞, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂ –∏ –∫–≤–∞—Ä—Ç–∏—Ä—É)',
        '–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:'
    ]
    await FSMRequest.request_adress.set()
    await callback.message.answer(text=' '.join(text), reply_markup=inline.pass_keyboard)
    await bot.answer_callback_query(callback.id)


async def request_photo_by_message(message: Message, state: FSMContext):
    text = [
        '<b><i>–®–∞–≥ 2/3.</i></b> üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:'
    ]
    user_id = message.from_user.id
    user_adress = message.text
    async with state.proxy() as data:
        data['user_id'] = user_id
        data['user_adress'] = user_adress
    await FSMRequest.request_photo.set()
    await message.answer(' '.join(text), reply_markup=inline.pass_keyboard)


async def request_photo_by_callback(callback: CallbackQuery, state: FSMContext):
    text = [
        '<b><i>–®–∞–≥ 2/3.</i></b> üñº–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∏–ª–∏ –≤–∏–¥–µ–æ –∫ —Å–≤–æ–µ–π –∑–∞—è–≤–∫–µ –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç –ø—É–Ω–∫—Ç:'
    ]
    user_adress = ''
    async with state.proxy() as data:
        data['user_id'] = callback.from_user.id
        data['user_adress'] = user_adress
    await FSMRequest.request_photo.set()
    await callback.message.answer(text=' '.join(text), reply_markup=inline.pass_keyboard)
    await bot.answer_callback_query(callback.id)


async def request_desc_by_message_success(message: Message, state: FSMContext):
    text = [
        '<b><i>–®–∞–≥ 3/3.</i></b> üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:'
    ]
    try:
        file_id = message.video.file_id
    except:
        file_id = message.photo[0].file_id
    async with state.proxy() as data:
        data['file_id'] = file_id
    await FSMRequest.request_description.set()
    await message.answer(text=' '.join(text), reply_markup=inline.back_keyboard)


async def request_desc_by_message_fail(message: Message):
    text = [
        '‚õîÔ∏èüìõ–í –¥–∞–Ω–Ω–æ–º –ø—É–Ω–∫—Ç–µ –Ω—É–∂–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å <b>—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é</b> –∏–ª–∏ <b>–≤–∏–¥–µ–æ</b> –≤ –≤–∏–¥–µ –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è.',
        '<b><i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:</i></b>'
    ]
    await message.answer(text=' '.join(text), reply_markup=inline.back_keyboard)


async def request_desc_by_callback(callback: CallbackQuery, state: FSMContext):
    text = [
        '<b><i>–®–∞–≥ 3/3.</i></b> üìõ–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö:'
    ]
    file_id = None
    async with state.proxy() as data:
        data['file_id'] = file_id
    await FSMRequest.request_description.set()
    await callback.message.answer(text=' '.join(text))
    await bot.answer_callback_query(callback.id)


async def request_finish(message: Message, state: FSMContext):
    text = [
        '‚úÖ<b>–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.</b> <i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</i>'
    ]
    config = load_config(".env")
    async with state.proxy() as data:
        request_group_id = config.misc.request_group
        user_id = data.as_dict()['user_id']
        user_adress = data.as_dict()['user_adress']
        file_id = data.as_dict()['file_id']
        db_response = await db_connector.get_user_by_id(user_id)
        user_username = db_response[0]
        user_name = db_response[1]
        user_phone = db_response[2]
        if len(user_username) > 0:
            user_username = '@' + user_username
        text_admin = [
            '‚õîÔ∏è<b>–ü–æ—Å—Ç—É–ø–∏–ª–∞ –∂–∞–ª–æ–±–∞:</b>',
            user_username,
            f'<b><i>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</i></b> {user_name}',
            f'<b><i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i></b> {user_phone}',
            f'<b><i>–ê–¥—Ä–µ—Å:</i></b> {user_adress}',
            f'<b><i>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</i></b> {message.text}'
        ]
        if file_id is not None:
            try:
                await bot.send_photo(chat_id=request_group_id, photo=file_id, caption='\n'.join(text_admin))
            except:
                await bot.send_video(chat_id=request_group_id, video=file_id, caption='\n'.join(text_admin))
        else:
            await bot.send_message(chat_id=request_group_id, text='\n'.join(text_admin))
        await state.finish()
        await message.answer(' '.join(text))


async def request_offer(callback: CallbackQuery):
    text = [
        'üí°<b><i>–†–∞—Å–ø–∏—à–∏—Ç–µ –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç—è—Ö: (–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å)</i></b>'
    ]
    await FSMRequest.offer_description.set()
    await callback.message.answer(text=' '.join(text), reply_markup=inline.back_keyboard)
    await bot.answer_callback_query(callback.id)


async def offer_finish(message: Message):
    config = load_config(".env")
    offer_group_id = config.misc.offer_group
    text_to_user = ['‚úÖüí°–ò–¥–µ—è –ø—Ä–∏–Ω—è—Ç–∞ –∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!']
    user_id = message.from_user.id
    db_response = await db_connector.get_user_by_id(user_id)
    user_username = db_response[0]
    user_name = db_response[1]
    user_phone = db_response[2]
    if len(user_username) > 0:
        user_username = '@' + user_username
    cont_type = message.content_type
    if cont_type == 'text':
        text_to_admin = [
            'üí°Ô∏è<b>–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>',
            user_username,
            f'<b><i>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</i></b> {user_name}',
            f'<b><i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i></b> {user_phone}',
            f'<b><i>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</i></b> {message.text}'
        ]
        await bot.send_message(chat_id=offer_group_id, text='\n'.join(text_to_admin))
        await message.answer(' '.join(text_to_user))
    else:
        text_to_admin = [
            'üí°Ô∏è<b>–ü–æ—Å—Ç—É–ø–∏–ª–æ –Ω–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:</b>',
            user_username,
            f'<b><i>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</i></b> {user_name}',
            f'<b><i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i></b> {user_phone}',
            f'<b><i>–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:</i></b> {message.caption}'
        ]
        if cont_type == 'photo':
            file_id = message.photo[0].file_id
            await bot.send_photo(chat_id=offer_group_id, photo=file_id, caption='\n'.join(text_to_admin))
        if cont_type == 'audio':
            file_id = message.audio.file_id
            await bot.send_audio(chat_id=offer_group_id, audio=file_id, caption='\n'.join(text_to_admin))
        if cont_type == 'video':
            file_id = message.video.file_id
            await bot.send_video(chat_id=offer_group_id, video=file_id, caption='\n'.join(text_to_admin))
        await message.answer(' '.join(text_to_user))


async def contact_info(message: Message):
    text = [
        '<u>–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è:</u>',
        '<b>–î–∏—Å–ø–µ—Ç—á–µ—Ä—Å–∫–∞—è —Å–ª—É–∂–±–∞ –û–û–û "–£–≠–†-–Æ–ì"</b>',
        '+7 4722 35-50-06',
        '<b>–ò–Ω–∂–µ–Ω–µ—Ä—ã –û–û–û "–£–≠–†-–Æ–ì"</b>',
        '+7 920 566-28-86',
        '<b>–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è –û–û–û "–£–≠–†-–Æ–ì"</b>',
        '+7 4722 35-50-06',
        '<i>–ë–µ–ª–≥–æ—Ä–æ–¥, –°–≤—è—Ç–æ-–¢—Ä–æ–∏—Ü–∫–∏–π –±-—Ä, –¥. 15, –ø–æ–¥—ä–µ–∑–¥ No 1</i>',
        '',
        '<u>–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–æ—Ä–æ—Ç –∏ —à–ª–∞–≥–±–∞—É–º–∞:</u>',
        '<b>–®–ª–∞–≥–±–∞—É–º "–ù–∞–±–µ—Ä–µ–∂–Ω–∞—è"</b>',
        '+7 920 554-87-74',
        '<b>–í–æ—Ä–æ—Ç–∞ "–•–∞—Ä—å–∫–æ–≤—Å–∫–∏–µ"</b>',
        '+7920 554-87-40',
        '<b>–í–æ—Ä–æ—Ç–∞ "–ú–æ—Å—Ç"</b>',
        '+7 920 554-64-06',
        '<b>–ö–∞–ª–∏—Ç–∫–∞ 1 "–ú–æ—Å—Ç"</b>',
        '+7 920 554-42-10',
        '<b>–ö–∞–ª–∏—Ç–∫–∞ 2 "–ú–æ—Å—Ç"</b>',
        '+7 920 554-89-04',
        '<b>–ö–∞–ª–∏—Ç–∫–∞ 3 "–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è"</b>',
        '+7 920 554-87-39',
        '<b>–ö–∞–ª–∏—Ç–∫–∞ 4 "–•–∞—Ä—å–∫–æ–≤—Å–∫–∞—è"</b>',
        '+7 920 554-89-02',
        '',
        '<b>–û—Ö—Ä–∞–Ω–∞</b>',
        '+7 915 57-91-457',
        '',
        '<b>–£—á–∞—Å—Ç–∫–æ–≤—ã–π</b>',
        '–ö—É–ª–µ–Ω—Ü–æ–≤–∞ –ú–∞—Ä–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞',
        '+7 999 421-53-72'
    ]
    await message.answer('\n'.join(text))


async def connection_method(message: Message):
    text = [
        'üëá–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏ –∏–∑ –Ω–∏–∂–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:'
    ]
    await FSMConnection.connection_method.set()
    await message.answer(text=' '.join(text), reply_markup=inline.connection_method_keyboard)


async def phone_confirm(callback: CallbackQuery):
    user_id = callback.from_user.id
    phone = await db_connector.get_phone(user_id)
    text = [
        f'<b>–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> {phone}? <i>–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, <b>–µ—Å–ª–∏ –Ω–µ—Ç,</b></i>',
        '–≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å'
    ]
    await FSMConnection.connection_confirm.set()
    await callback.message.answer(text=' '.join(text), reply_markup=inline.yes_keyboard)
    await bot.answer_callback_query(callback.id)


async def change_phone_by_connection(message: Message):
    text = [
        'üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!'
    ]
    text_error = [
        f'‚õîÔ∏èüìõ‚õî<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ',
        f'<b>+7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>'
    ]
    check_phone = await checker.user_phone_checker(str(message.text))
    if check_phone:
        user_id = message.from_user.id
        await db_connector.change_phone(user_id=user_id, new_phone=message.text)
        await message.answer(text=' '.join(text))
        phone = await db_connector.get_phone(user_id)
        text = [
            f'<b>–≠—Ç–æ –í–∞—à –≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> {phone}? <i>–ï—Å–ª–∏ –¥–∞, –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É, <b>–µ—Å–ª–∏ –Ω–µ—Ç,</b></i>',
            '–≤–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–¥–µ—Å—å'
        ]
        await FSMConnection.connection_confirm.set()
        await message.answer(text=' '.join(text), reply_markup=inline.yes_keyboard)
    else:
        await message.answer(' '.join(text_error))


async def get_call_offer(callback: CallbackQuery):
    config = load_config(".env")
    admin_group_id = config.misc.admin_group
    text_to_user = ['‚úÖ–û—Ç–ª–∏—á–Ω–æ! –ù–∞—à –¥–∏—Å–ø–µ—Ç—á–µ—Ä –ø–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç –í–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.']
    user_id = callback.from_user.id
    db_response = await db_connector.get_user_by_id(user_id)
    user_username = db_response[0]
    user_name = db_response[1]
    user_phone = db_response[2]
    if len(user_username) > 0:
        user_username = '@' + user_username
    text_to_admin = [
        'üí°Ô∏è<b>–ü–æ—Å—Ç—É–ø–∏–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–≤–æ–Ω–æ–∫:</b>',
        user_username,
        f'<b><i>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</i></b> {user_name}',
        f'<b><i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i></b> {user_phone}'
    ]
    await bot.send_message(chat_id=admin_group_id, text='\n'.join(text_to_admin))
    await callback.message.answer(' '.join(text_to_user))
    await bot.answer_callback_query(callback.id)


async def start_dialog(callback: CallbackQuery):
    text = [
        '‚úÖüìû‚úÖ–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø - –¥–∏—Å–ø–µ—Ç—á–µ—Ä —É–ø—Ä–∞–≤–ª—è—é—â–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–£–≠–†-–Æ–ì", –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –í–∞–º. –ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
        '–∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å –∏ –æ–∂–∏–¥–∞–π—Ç–µ'
    ]
    await FSMConnection.operator_dialog.set()
    await callback.message.answer(text=' '.join(text), reply_markup=inline.close_dialog_keyboard)
    await bot.answer_callback_query(callback.id)


async def message_to_operator(message: Message):
    config = load_config(".env")
    admin_group_id = config.misc.admin_group
    user_id = message.from_user.id
    db_response = await db_connector.get_user_by_id(user_id)
    user_username = db_response[0]
    user_name = db_response[1]
    user_phone = db_response[2]
    if len(user_username) > 0:
        user_username = '@' + user_username
    text_to_admin = [
        '‚úâÔ∏è<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>',
        f'{user_username} [{user_id}]',
        f'<b><i>–ò–º—è –∏ –§–∞–º–∏–ª–∏—è:</i></b> {user_name}',
        f'<b><i>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</i></b> {user_phone}',
        f'<b><i>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:</i></b> {message.text}',
        '',
        '<b>–î–ª—è –æ—Ç–≤–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ"</b>'
    ]
    await bot.send_message(chat_id=admin_group_id, text='\n'.join(text_to_admin))


async def finish_dialog(callback: CallbackQuery):
    text = [
        '‚ùåüìû–î–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à—ë–Ω...'
    ]
    await FSMRegistration.main.set()
    await callback.message.answer(text=' '.join(text))
    await bot.answer_callback_query(callback.id)


async def choice_settings(message: Message):
    text = [
        '‚öô–¢—É—Ç –í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å <b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—é</b> –≤ –ë–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –∏–ª–∏ –∂–µ –ø–æ–º–µ–Ω—è—Ç—å –í–∞—à',
        '<b>–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>, –µ—Å–ª–∏ –í—ã –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–≤–æ–¥–∏–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ–≤–µ—Ä–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å –∏–ª–∏',
        '–≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥ –≤ <b><i>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</i></b>'
    ]
    await FSMSettings.settings_choice.set()
    await message.answer(text=' '.join(text), reply_markup=inline.choice_settings_keyboard)


async def change_name_start(callback: CallbackQuery):
    text = [
        'üõ†<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—ë –ò–º—è –∏ –§–∞–º–∏–ª–∏—é, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</i>'
    ]
    await FSMSettings.settings_name.set()
    await callback.message.answer(text=' '.join(text))
    await bot.answer_callback_query(callback.id)


async def change_name_finish(message: Message):
    text_ok = [
        'üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!'
    ]
    text_error = [
        f'‚õîÔ∏èüìõ<b>–ò–º—è</b> –∏ <b>–§–∞–º–∏–ª–∏—è</b> –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–≤–µ–¥–µ–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–∏–Ω <i>–ø—Ä–æ–±–µ–ª</i>, –∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å',
        f'–Ω–∞–ø–∏—Å–∞–Ω—ã —á–µ—Ä–µ–∑ <i>–∫–∏—Ä–∏–ª–ª–∏—Ü—É</i>. –¢–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <i>–∑–∞–≥–ª–∞–≤–Ω—ã–µ –±—É–∫–≤—ã</i>.',
        f'<b>–£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>'
    ]
    check_name = await checker.user_name_checker(str(message.text))
    if check_name:
        user_id = message.from_user.id
        await db_connector.change_name(user_id=user_id, new_name=message.text)
        await FSMRegistration.main.set()
        await message.answer(text=' '.join(text_ok))
    else:
        await message.answer(' '.join(text_error))


async def change_phone_start(callback: CallbackQuery):
    text = [
        'üõ†<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –ø–æ–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</i>'
    ]
    await FSMSettings.settings_phone.set()
    await callback.message.answer(text=' '.join(text))
    await bot.answer_callback_query(callback.id)


async def change_phone_finish(message: Message):
    text_ok = [
        'üõ†‚úÖüõ†–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!'
    ]
    text_error = [
        f'‚õîÔ∏èüìõ‚õî<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –¥–æ–ª–∂–µ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ',
        f'<b>+7. –£—á—Ç–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:</b>'
    ]
    check_phone = await checker.user_phone_checker(str(message.text))
    if check_phone:
        user_id = message.from_user.id
        await db_connector.change_phone(user_id=user_id, new_phone=message.text)
        await FSMRegistration.main.set()
        await message.answer(text=' '.join(text_ok))
    else:
        await message.answer(' '.join(text_error))


async def you_are_blocked_by_message(message: Message):
    text = [
        '‚ùå‚ùå‚ùå–í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´!',
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    ]
    await message.answer('\n'.join(text))


async def you_are_blocked_by_callback(callback: CallbackQuery):
    text = [
        '‚ùå‚ùå‚ùå–í–´ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù–´!',
        '–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'
    ]
    await callback.message.answer('\n'.join(text))


def register_user(dp: Dispatcher):
    dp.register_message_handler(you_are_blocked_by_message, state='*', is_blocked=True)
    dp.register_message_handler(user_start, commands=["start"], state='*', is_loged=False)
    dp.register_message_handler(main_menu_by_message, commands=["start"], state='*', is_loged=True)
    dp.register_message_handler(get_user_name, content_types=['text'], state=FSMRegistration.name)
    dp.register_message_handler(get_user_phone, content_types=['text'], state=FSMRegistration.phone)
    dp.register_message_handler(request_category_by_message, Text(equals='üìõ–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'), state='*')
    dp.register_message_handler(request_photo_by_message, content_types=['text'], state=FSMRequest.request_adress)
    dp.register_message_handler(request_desc_by_message_success, content_types=['photo', 'video'],
                                state=FSMRequest.request_photo)
    dp.register_message_handler(request_desc_by_message_fail, state=FSMRequest.request_photo)
    dp.register_message_handler(request_finish, state=FSMRequest.request_description)
    dp.register_message_handler(offer_finish, content_types=['text', 'video', 'photo'],
                                state=FSMRequest.offer_description)
    dp.register_message_handler(contact_info, Text(equals='‚òéÔ∏è–ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã'), state='*')
    dp.register_message_handler(connection_method, Text(equals='üìû–°–≤—è–∑–∞—Ç—å—Å—è'), state='*')
    dp.register_message_handler(change_phone_by_connection, content_types=['text'],
                                state=FSMConnection.connection_confirm)
    dp.register_message_handler(message_to_operator, content_types=['text'], state=FSMConnection.operator_dialog)
    dp.register_message_handler(choice_settings, Text(equals='‚öôÔ∏è–ù–∞—Å—Ç—Ä–æ–π–∫–∏'), state='*')
    dp.register_message_handler(change_name_finish, content_types=['text'], state=FSMSettings.settings_name)
    dp.register_message_handler(change_phone_finish, content_types=['text'], state=FSMSettings.settings_phone)

    dp.register_callback_query_handler(you_are_blocked_by_callback, state='*', is_blocked=True)
    dp.register_callback_query_handler(main_menu_by_callback, lambda x: x.data == 'back', state=FSMRequest.request_main)
    dp.register_callback_query_handler(request_offer, lambda x: x.data == 'share_offer', state=FSMRequest.request_main)
    dp.register_callback_query_handler(request_adress, lambda x: x.data == 'leave_req', state=FSMRequest.request_main)
    dp.register_callback_query_handler(request_photo_by_callback, lambda x: x.data == 'pass',
                                       state=FSMRequest.request_adress)
    dp.register_callback_query_handler(request_category_by_callback, lambda x: x.data == 'back',
                                       state=FSMRequest.request_adress)
    dp.register_callback_query_handler(request_desc_by_callback, lambda x: x.data == 'pass',
                                       state=FSMRequest.request_photo)
    dp.register_callback_query_handler(request_adress, lambda x: x.data == 'back', state=FSMRequest.request_photo)
    dp.register_callback_query_handler(request_photo_by_callback, lambda x: x.data == 'back',
                                       state=FSMRequest.request_description)
    dp.register_callback_query_handler(request_category_by_callback, lambda x: x.data == 'back',
                                       state=FSMRequest.offer_description)
    dp.register_callback_query_handler(main_menu_by_callback, lambda x: x.data == 'back',
                                       state=FSMConnection.connection_method)
    dp.register_callback_query_handler(phone_confirm, lambda x: x.data == 'call_me',
                                       state=FSMConnection.connection_method)
    dp.register_callback_query_handler(get_call_offer, lambda x: x.data == 'yes',
                                       state=FSMConnection.connection_confirm)
    dp.register_callback_query_handler(start_dialog, lambda x: x.data == 'write_me',
                                       state=FSMConnection.connection_method)
    dp.register_callback_query_handler(finish_dialog, lambda x: x.data == 'close_dialog',
                                       state=FSMConnection.operator_dialog)
    dp.register_callback_query_handler(main_menu_by_callback, lambda x: x.data == 'back',
                                       state=FSMSettings.settings_choice)
    dp.register_callback_query_handler(change_name_start, lambda x: x.data == 'change_name',
                                       state=FSMSettings.settings_choice)
    dp.register_callback_query_handler(change_phone_start, lambda x: x.data == 'change_phone',
                                       state=FSMSettings.settings_choice)
